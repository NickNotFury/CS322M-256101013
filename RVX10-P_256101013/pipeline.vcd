$date
	Thu Oct 30 23:52:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 # WriteData [31:0] $end
$var wire 32 $ ReadData [31:0] $end
$var wire 32 % PC [31:0] $end
$var wire 1 & MemWrite $end
$var wire 32 ' Instr [31:0] $end
$var wire 32 ( DataAdr [31:0] $end
$scope module dmem $end
$var wire 1 ! clk $end
$var wire 32 ) rd [31:0] $end
$var wire 1 & we $end
$var wire 32 * wd [31:0] $end
$var wire 32 + a [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 , rd [31:0] $end
$var wire 32 - a [31:0] $end
$upscope $end
$scope module rvpipe $end
$var wire 32 . DataAdr [31:0] $end
$var wire 32 / Instr [31:0] $end
$var wire 1 & MemWrite $end
$var wire 32 0 PC [31:0] $end
$var wire 1 1 PCSrcE $end
$var wire 32 2 ReadData [31:0] $end
$var wire 32 3 WriteData [31:0] $end
$var wire 32 4 WriteDataE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 5 rs2D [4:0] $end
$var wire 5 6 rs1D [4:0] $end
$var wire 5 7 rdD [4:0] $end
$var wire 1 8 ZeroE $end
$var wire 1 9 StallF $end
$var wire 1 : StallD $end
$var wire 32 ; SrcBE [31:0] $end
$var wire 32 < SrcAE [31:0] $end
$var wire 32 = ResultW [31:0] $end
$var wire 2 > ResultSrcD [1:0] $end
$var wire 1 ? RegWriteD $end
$var wire 32 @ ReadData2D [31:0] $end
$var wire 32 A ReadData1D [31:0] $end
$var wire 32 B PCTargetE [31:0] $end
$var wire 32 C PCPlus4F [31:0] $end
$var wire 32 D PCNextF [31:0] $end
$var wire 1 E MemWriteD $end
$var wire 1 F MemReadE $end
$var wire 1 G JumpD $end
$var wire 2 H ImmSrcD [1:0] $end
$var wire 32 I ImmExtD [31:0] $end
$var wire 2 J ForwardBE [1:0] $end
$var wire 2 K ForwardAE [1:0] $end
$var wire 1 L FlushE $end
$var wire 1 M FlushD $end
$var wire 1 N BranchD $end
$var wire 1 O ALUSrcD $end
$var wire 32 P ALUSrcB [31:0] $end
$var wire 32 Q ALUResultE [31:0] $end
$var wire 5 R ALUControlD [4:0] $end
$var reg 5 S ALUControlE [4:0] $end
$var reg 32 T ALUResultM [31:0] $end
$var reg 32 U ALUResultW [31:0] $end
$var reg 1 V ALUSrcE $end
$var reg 1 W BranchE $end
$var reg 32 X ImmExtE [31:0] $end
$var reg 32 Y InstrD [31:0] $end
$var reg 1 Z JumpE $end
$var reg 1 [ MemWriteE $end
$var reg 1 \ MemWriteM $end
$var reg 32 ] PCD [31:0] $end
$var reg 32 ^ PCE [31:0] $end
$var reg 32 _ PCF [31:0] $end
$var reg 32 ` PCPlus4D [31:0] $end
$var reg 32 a PCPlus4E [31:0] $end
$var reg 32 b PCPlus4M [31:0] $end
$var reg 32 c PCPlus4W [31:0] $end
$var reg 32 d ReadData1E [31:0] $end
$var reg 32 e ReadData2E [31:0] $end
$var reg 32 f ReadDataW [31:0] $end
$var reg 1 g RegWriteE $end
$var reg 1 h RegWriteM $end
$var reg 1 i RegWriteW $end
$var reg 2 j ResultSrcE [1:0] $end
$var reg 2 k ResultSrcM [1:0] $end
$var reg 2 l ResultSrcW [1:0] $end
$var reg 32 m WriteDataM [31:0] $end
$var reg 32 n cycle_count [31:0] $end
$var reg 32 o instr_retired [31:0] $end
$var reg 5 p rdE [4:0] $end
$var reg 5 q rdM [4:0] $end
$var reg 5 r rdW [4:0] $end
$var reg 5 s rs1E [4:0] $end
$var reg 5 t rs2E [4:0] $end
$scope module alu $end
$var wire 5 u alucontrol [4:0] $end
$var wire 1 8 zero $end
$var wire 32 v b [31:0] $end
$var wire 32 w a [31:0] $end
$var reg 32 x result [31:0] $end
$scope begin $unm_blk_8 $end
$var reg 5 y shamt [4:0] $end
$upscope $end
$upscope $end
$scope module c $end
$var wire 3 z funct3 [2:0] $end
$var wire 7 { funct7 [6:0] $end
$var wire 7 | op [6:0] $end
$var wire 2 } ResultSrc [1:0] $end
$var wire 1 ? RegWrite $end
$var wire 1 E MemWrite $end
$var wire 1 G Jump $end
$var wire 2 ~ ImmSrc [1:0] $end
$var wire 1 N Branch $end
$var wire 1 O ALUSrc $end
$var wire 2 !" ALUOp [1:0] $end
$var wire 5 "" ALUControl [4:0] $end
$scope module ad $end
$var wire 3 #" funct3 [2:0] $end
$var wire 7 $" funct7 [6:0] $end
$var wire 2 %" ALUOp [1:0] $end
$var reg 5 &" ALUControl [4:0] $end
$upscope $end
$scope module md $end
$var wire 7 '" op [6:0] $end
$var wire 2 (" ResultSrc [1:0] $end
$var wire 1 ? RegWrite $end
$var wire 1 E MemWrite $end
$var wire 1 G Jump $end
$var wire 2 )" ImmSrc [1:0] $end
$var wire 1 N Branch $end
$var wire 1 O ALUSrc $end
$var wire 2 *" ALUOp [1:0] $end
$var reg 11 +" controls [10:0] $end
$upscope $end
$upscope $end
$scope module ext $end
$var wire 2 ," immsrc [1:0] $end
$var wire 25 -" instr [31:7] $end
$var wire 32 ." immext [31:0] $end
$upscope $end
$scope module fwdAmux $end
$var wire 32 /" d0 [31:0] $end
$var wire 32 0" d2 [31:0] $end
$var wire 32 1" y [31:0] $end
$var wire 2 2" s [1:0] $end
$var wire 32 3" d1 [31:0] $end
$upscope $end
$scope module fwdBmux $end
$var wire 32 4" d0 [31:0] $end
$var wire 32 5" d2 [31:0] $end
$var wire 32 6" y [31:0] $end
$var wire 2 7" s [1:0] $end
$var wire 32 8" d1 [31:0] $end
$upscope $end
$scope module fwd_unit $end
$var wire 1 h RegWriteM $end
$var wire 1 i RegWriteW $end
$var wire 5 9" rdM [4:0] $end
$var wire 5 :" rdW [4:0] $end
$var wire 5 ;" rs1E [4:0] $end
$var wire 5 <" rs2E [4:0] $end
$var reg 2 =" ForwardAE [1:0] $end
$var reg 2 >" ForwardBE [1:0] $end
$upscope $end
$scope module hzd_unit $end
$var wire 1 M FlushD $end
$var wire 1 L FlushE $end
$var wire 1 F MemReadE $end
$var wire 1 1 PCSrcE $end
$var wire 1 : StallD $end
$var wire 1 9 StallF $end
$var wire 1 ?" load_use_hazard $end
$var wire 5 @" rdE [4:0] $end
$var wire 5 A" rs1D [4:0] $end
$var wire 5 B" rs2D [4:0] $end
$upscope $end
$scope module pcadd4 $end
$var wire 32 C" a [31:0] $end
$var wire 32 D" b [31:0] $end
$var wire 32 E" y [31:0] $end
$upscope $end
$scope module pcaddbranch $end
$var wire 32 F" a [31:0] $end
$var wire 32 G" b [31:0] $end
$var wire 32 H" y [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 I" d0 [31:0] $end
$var wire 32 J" d1 [31:0] $end
$var wire 1 1 s $end
$var wire 32 K" y [31:0] $end
$upscope $end
$scope module resultmux $end
$var wire 32 L" d0 [31:0] $end
$var wire 32 M" d1 [31:0] $end
$var wire 32 N" d2 [31:0] $end
$var wire 2 O" s [1:0] $end
$var wire 32 P" y [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 Q" a1 [4:0] $end
$var wire 5 R" a2 [4:0] $end
$var wire 5 S" a3 [4:0] $end
$var wire 1 ! clk $end
$var wire 32 T" wd3 [31:0] $end
$var wire 1 i we3 $end
$var wire 32 U" rd2 [31:0] $end
$var wire 32 V" rd1 [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 W" d0 [31:0] $end
$var wire 32 X" d1 [31:0] $end
$var wire 1 V s $end
$var wire 32 Y" y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b100 K"
b0 J"
b100 I"
b0 H"
b0 G"
b0 F"
b100 E"
b100 D"
b0 C"
b0 B"
b0 A"
b0 @"
0?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b10010000100 +"
b10 *"
b0 )"
b0 ("
b10011 '"
b0 &"
b10 %"
b0 $"
b0 #"
b0 ""
b10 !"
b0 ~
b0 }
b10011 |
b0 {
b0 z
bz y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
0i
0h
0g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
0\
0[
0Z
b10011 Y
b0 X
0W
0V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
1O
0N
0M
0L
b0 K
b0 J
b0 I
b0 H
0G
0F
0E
b100 D
b100 C
b0 B
b0 A
b0 @
1?
b0 >
b0 =
b0 <
b0 ;
0:
09
18
b0 7
b0 6
b0 5
b0 4
b0 3
bx 2
01
b0 0
b101000000000001010010011 /
b0 .
b0 -
b101000000000001010010011 ,
b0 +
b0 *
bx )
b0 (
b101000000000001010010011 '
0&
b0 %
bx $
b0 #
1"
1!
$end
#5
0!
#10
1!
#15
0!
#20
1!
#22
0"
#25
0!
#30
b1010 I
b1010 ."
bx @
bx U"
b1010 5
b1010 B"
b1010 R"
b101 7
b10100000000000101 -"
b1000 D
b1000 K"
b111100000000001100010011 '
b111100000000001100010011 ,
b111100000000001100010011 /
b1 n
bx f
bx M"
1V
1g
b100 `
b101000000000001010010011 Y
b1000 C
b1000 E"
b1000 I"
b100 %
b100 -
b100 0
b100 _
b100 C"
1!
#35
0!
#40
b1111 I
b1111 ."
bx 4
bx ;
bx 6"
bx W"
08
b1010 Q
b1010 x
b1100 D
b1100 K"
b11000101000001110110011 '
b11000101000001110110011 ,
b11000101000001110110011 /
b1111 5
b1111 B"
b1111 R"
b110 7
b11110000000000110 -"
b1010 P
b1010 v
b1010 Y"
b1100 C
b1100 E"
b1100 I"
b1000 %
b1000 -
b1000 0
b1000 _
b1000 C"
b1000 `
b111100000000001100010011 Y
b100 ]
b1010 t
b1010 <"
b101 p
b101 @"
bx e
bx 4"
b1010 B
b1010 H"
b1010 J"
b1010 X
b1010 G"
b1010 X"
b100 a
1h
b10 n
1!
#45
0!
#50
bx I
bx ."
bx H
bx ~
bx )"
bx ,"
0O
bx A
bx V"
b1xx00000100 +"
b1111 Q
b1111 x
b1111 P
b1111 v
b1111 Y"
b101 6
b101 A"
b101 Q"
b110 5
b110 B"
b110 R"
b111 7
b110011 |
b110011 '"
b1100010100000111 -"
b10000 D
b10000 K"
b110010000000000010000010011 '
b110010000000000010000010011 ,
b110010000000000010000010011 /
b11 n
1i
b101 q
b101 9"
b1010 (
b1010 +
b1010 .
b1010 T
b1010 0"
b1010 5"
bx #
bx *
bx 3
bx m
b100 b
b1111 t
b1111 <"
b110 p
b110 @"
b100 ^
b100 F"
b10011 B
b10011 H"
b10011 J"
b1111 X
b1111 G"
b1111 X"
b1000 a
b1100 `
b11000101000001110110011 Y
b1000 ]
b10000 C
b10000 E"
b10000 I"
b1100 %
b1100 -
b1100 0
b1100 _
b1100 C"
1!
#55
0!
#60
b1100100 I
b1100100 ."
b0 H
b0 ~
b0 )"
b0 ,"
1O
b1111 4
b1111 ;
b1111 6"
b1111 W"
b0 A
b0 V"
b1010 <
b1010 w
b1010 1"
b10010000100 +"
08
b11001 Q
b11001 x
b1010 =
b1010 3"
b1010 8"
b1010 P"
b1010 T"
b10100 D
b10100 K"
b11101000010000000100011 '
b11101000010000000100011 ,
b11101000010000000100011 /
b0 6
b0 A"
b0 Q"
b100 5
b100 B"
b100 R"
b1000 7
b10011 |
b10011 '"
b11 {
b11 $"
b11001000000000001000 -"
b1111 P
b1111 v
b1111 Y"
b10 J
b10 7"
b10 >"
b1 K
b1 2"
b1 ="
b10100 C
b10100 E"
b10100 I"
b10000 %
b10000 -
b10000 0
b10000 _
b10000 C"
b10000 `
b110010000000000010000010011 Y
b1100 ]
b101 s
b101 ;"
b110 t
b110 <"
b111 p
b111 @"
b1000 ^
b1000 F"
bx d
bx /"
bx B
bx H"
bx J"
bx X
bx G"
bx X"
b1100 a
0V
b110 q
b110 9"
b1111 (
b1111 +
b1111 .
b1111 T
b1111 0"
b1111 5"
b1000 b
b101 r
b101 :"
b101 S"
b1010 U
b1010 L"
b100 c
b100 N"
b100 n
b1 o
1!
#65
0!
#70
b0 <
b0 w
b0 1"
b0 I
b0 ."
b1111 =
b1111 3"
b1111 8"
b1111 P"
b1111 T"
0?
b1 H
b1 ~
b1 )"
b1 ,"
1E
b0 !"
b0 %"
b0 *"
bx A
bx V"
bx 4
bx ;
bx 6"
bx W"
b111000000 +"
b0 R
b0 ""
b0 &"
b1100100 Q
b1100100 x
b0 K
b0 2"
b0 ="
b0 J
b0 7"
b0 >"
b1100100 P
b1100100 v
b1100100 Y"
b1000 6
b1000 A"
b1000 Q"
b111 5
b111 B"
b111 R"
b0 7
b100011 |
b100011 '"
b10 z
b10 #"
b0 {
b0 $"
b1110100001000000 -"
b11000 D
b11000 K"
b1000010010010000011 '
b1000010010010000011 ,
b1000010010010000011 /
b10 o
b101 n
b110 r
b110 :"
b110 S"
b1111 U
b1111 L"
b1000 c
b1000 N"
b111 q
b111 9"
b11001 (
b11001 +
b11001 .
b11001 T
b11001 0"
b11001 5"
b1111 #
b1111 *
b1111 3
b1111 m
b1100 b
b0 s
b0 ;"
b100 t
b100 <"
b1000 p
b1000 @"
b1100 ^
b1100 F"
b0 d
b0 /"
b1110000 B
b1110000 H"
b1110000 J"
b1100100 X
b1100100 G"
b1100100 X"
b10000 a
1V
b10100 `
b11101000010000000100011 Y
b10000 ]
b11000 C
b11000 E"
b11000 I"
b10100 %
b10100 -
b10100 0
b10100 _
b10100 C"
1!
#75
0!
#80
b11001 4
b11001 ;
b11001 6"
b11001 W"
1?
b0 H
b0 ~
b0 )"
b0 ,"
0E
b1 >
b1 }
b1 ("
b0 @
b0 U"
b1100100 <
b1100100 w
b1100100 1"
b10010010000 +"
08
b1100100 Q
b1100100 x
b11001 =
b11001 3"
b11001 8"
b11001 P"
b11001 T"
b11100 D
b11100 K"
b1001000010100110011 '
b1001000010100110011 ,
b1001000010100110011 /
b0 5
b0 B"
b0 R"
b1001 7
b11 |
b11 '"
b100001001001 -"
b0 P
b0 v
b0 Y"
b1 J
b1 7"
b1 >"
b10 K
b10 2"
b10 ="
b11100 C
b11100 E"
b11100 I"
b11000 %
b11000 -
b11000 0
b11000 _
b11000 C"
b11000 `
b1000010010010000011 Y
b10100 ]
b1000 s
b1000 ;"
b111 t
b111 <"
b0 p
b0 @"
b10000 ^
b10000 F"
bx d
bx /"
b10000 B
b10000 H"
b10000 J"
b0 X
b0 G"
b0 X"
b10100 a
1[
0g
b1000 q
b1000 9"
b1100100 (
b1100100 +
b1100100 .
b1100100 T
b1100100 0"
b1100100 5"
bx #
bx *
bx 3
bx m
b10000 b
b111 r
b111 :"
b111 S"
b11001 U
b11001 L"
b1100 c
b1100 N"
b110 n
b11 o
1!
#85
0!
#90
08
b1100100 Q
b1100100 x
b0 4
b0 ;
b0 6"
b0 W"
bx I
bx ."
b1100100 <
b1100100 w
b1100100 1"
b1100100 =
b1100100 3"
b1100100 8"
b1100100 P"
b1100100 T"
bx H
bx ~
bx )"
bx ,"
0O
b0 >
b0 }
b0 ("
b10 !"
b10 %"
b10 *"
19
1:
1L
1?"
b1xx00000100 +"
b1 K
b1 2"
b1 ="
b0 J
b0 7"
b0 >"
b1001 6
b1001 A"
b1001 Q"
b1010 7
b110011 |
b110011 '"
b0 z
b0 #"
b100100001010 -"
b100000 D
b100000 K"
b11101010000010001100011 '
b11101010000010001100011 ,
b11101010000010001100011 /
b100 o
b111 n
b1000 r
b1000 :"
b1000 S"
b1100100 U
b1100100 L"
b10000 c
b10000 N"
b0 q
b0 9"
b11001 #
b11001 *
b11001 3
b11001 m
b10100 b
1&
1\
0h
b0 t
b0 <"
b1001 p
b1001 @"
b10100 B
b10100 H"
b10100 J"
b10100 ^
b10100 F"
b0 e
b0 4"
b11000 a
1F
b1 j
0[
1g
b11100 `
b1001000010100110011 Y
b11000 ]
b100000 C
b100000 E"
b100000 I"
b11100 %
b11100 -
b11100 0
b11100 _
b11100 C"
1!
#95
